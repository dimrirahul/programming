// {{{ Boilerplate Code <--------------------------------------------------
// vim:filetype=cpp:foldmethod=marker:foldmarker={{{,}}}

#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     (A).begin(), (A).end()

using namespace std;

// }}}


class Node {
    public:
        int pos;
        int numCats;
        pair <int, int> range;
        Node(int position, int numberOfCats): pos(position), numCats(numberOfCats) {
            range =  make_pair(0, 0);
        }
        bool operator < (Node other) const {
            return pos < other.pos;
        }

        bool areOverlapping(Node other) const {
            int otherStart = other.range.first;

            if (otherStart <= range.second) {
                return true;
            } else {
                return false;
            }
        }

        bool isWideEnough() {
            if (range.second - range.first >= numCats - 1) {
                return true;
            } else {
                return false;
            }
        }

        void print() {
            printf("Pos =%d, numCats =%d, rangeStart=%d, rangeEnd=%d\n", pos, numCats, range.first, range.second);
        }
};

class CatsOnTheLineDiv2
{
public:
    vector <Node> cv;

    void evaluateRange(int time) {
        for (int i = 0; i < cv.size(); i++) {
            Node &node = cv[i];
            int t = min(time, node.numCats);
            node.range =  make_pair(node.pos - t, node.pos + t);
        }
    }

	string getAnswer(vector <int> position, vector <int> count, int time)
	{
        for (int i = 0; i < count.size(); i++) {
            cv.push_back(Node(position[i], count[i]));
        }
        sort(cv.begin(), cv.end());
        evaluateRange(time);

        bool possible = cv[0].isWideEnough();
        Node prev = cv[0];
        for (int i = 1; i < cv.size(); i++) {
            if (cv[i].isWideEnough() && !prev.areOverlapping(cv[i])) {
                prev = cv[i];
            } else {
                cout << "CV[i] = ";
                cv[i].print();
                cout << "Prev = ";
                prev.print();
                possible = false;
                break;
            }
        }

        if (possible) {
            return string("Possible");
        } else {
		    return string("Impossible");
        }
	}
};


// Edited by VimCoder 0.3.5
// http://github.com/chazmcgarvey/vimcoder